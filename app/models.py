'''
This file is the 'Model' part of the chat application's MVC architecture.
It contains definitions of the four model abstractions that the chat application
uses: seen status, messages, users, and groups. 

Each of these classes corresponds to a table in the SQLAlchemy database.
The constructors for the classes define the schema for the corresponding
table. Note that simply creating a Model object doesn't add it to the 
database: one must add it and commit it to have the data persist.
'''

# Flask framework component representing the (SQLAlchemy-powered) database
from app import db


#==================================
# MODELS

# Each of the classes below extend db.Model. Flask automagically associates
# instances of Models to the SQLAlchemy database.

class Seen(db.Model):
    '''
    The Seen class encapsulates the last seen message ID per user per 
    chatroom. This allows us to enforce the following correctness
    property:

        The client needs to render every message it receives 
        from the server in the correct order, exactly once.

    To achieve this, we note that message IDs are monotonically increasing
    with time sent. So, every time the server receives a fetch message request
    from a user for a conversation, it sends only messages with IDs greater than 
    the last seen ID for this conversation â€” i.e., messages sent afterwards. 
    When a client successfully receives messages from the server for a given chatroom, 
    the client will make a follow-up 'ack' HTTP request to the server, with ID of the 
    latest message received, and the server records this information.

    Schema:
    - `id`
        - Type: Integer
        - Autogenerated, sequentially increasing ID
    - `viewer` 
        - Type: string of up to 20 characters
        - username of the user viewing the messages
    - `room_user` 
        - Type: string of up to 20 characters
        - Username of the sender of the message that `viewer` is viewing. Set 
          for entries corresponding to private user-to-user chats; null otherwise. 
    - `room_group` 
        - Type: String of up to 40 characters
        - Name of the group whose messages `viewer` is viewing. Set for entries 
          corresponding to group chats; null otherwise. 
    - `last_seen_id`
        - Type: Integer
        - ID of the most-recently-sent message in this conversation that `viewer` 
          has acknowledged receiving
    '''

    __tablename__ = 'seen'

    id = db.Column(db.Integer, primary_key=True)

    viewer = db.Column(db.String(20), db.ForeignKey('user.username'))
    room_user = db.Column(db.String(20), db.ForeignKey('user.username'), 
        nullable=True)
    room_group = db.Column(db.String(40), db.ForeignKey('group.groupname'),
        nullable=True)
    last_seen_id = db.Column(db.Integer, db.ForeignKey('message.id'), default=0)


class Message(db.Model):
    '''
    The Message class represents a message from one user to either another 
    user or a group of users. 

    Schema:
    - `id`
        - Type: Integer
        - Autogenerated, sequentially increasing ID
    - `body`
        - Type: String
        - Body of the message
    - `timestamp`
        - Type: SQLAlchemy's DateTime 
        - Send time, i.e., time that this message was added to the database
    - `sender_username` 
        - Type: String of up to 20 characters
        - Username of the sender of the message
    - `to_username` 
        - Type: String of up to 20 characters
        - Username of the recipient of the message. Set for entries corresponding 
          to private user-to-user chats; null otherwise.
    - `room_group` 
        - Type: String of up to 40 characters
        - Name of the group receiving the message. Set for entries 
          corresponding to group chats; null otherwise. 
    '''

    __tablename__ = 'message'

    id = db.Column(db.Integer, primary_key=True)
    body = db.Column(db.Text(), nullable=False)
    timestamp = db.Column(db.DateTime)

    # NULL sender means that the user deleted the account
    sender_username = db.Column(db.String(20), db.ForeignKey('user.username'), default='<Account Deleted>')
    to_username = db.Column(db.String(20), db.ForeignKey('user.username'), \
        nullable=True)
    to_groupname = db.Column(db.String(40), db.ForeignKey('group.groupname'), \
        nullable=True)

    def __repr__(self):
        return '<Message %r>' % (self.body)

# Link User objects with Group objects, so that given a group, 
# it is easy to access information about all the users in the group.
users_groups_assoc_table = db.Table('usersgroups', 
    db.Column('user_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('group_id', db.Integer, db.ForeignKey('group.id'),)
)

class User(db.Model):
    '''
    The User class represents a user in the chat system.

    Schema:
    - `id`
        - Type: Integer
        - Autogenerated, sequentially increasing ID
    - `username`
        - Type: String of up to 20 characters
        - Username of the user
        - Must be unique across users
    - `logged_in` 
        - Type: Boolean
        - Whether the user is currently logged-in on some device. We
          prevent users from logging in on multiple devices because the system 
          does not have the synchronization in place to handle sending messages
          to multiple instances of the same user without dropping or duplicating
          messages.
    - `received_msgs` 
        - Type: list(Message)
        - List of all messages sent to this user in any chat. Empty if no
          such messages exist.
    - `sent_msgs`
        - Type: list(Message)
        - List of all messages this user has ever sent in any chat. Empty if 
          no such messages exist.
    - `groups`
        - Type: list(Group)
        - List of all groups of which this user is a member.
    '''
    __tablename__ = 'user'

    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), index=True, unique=True)

    logged_in = db.Column(db.Boolean, default=False)

    received_msgs = db.relationship('Message', backref='to_user', lazy='dynamic', \
        foreign_keys=[Message.to_username])
    sent_msgs = db.relationship('Message', lazy='dynamic', \
        foreign_keys=[Message.sender_username])

    groups = db.relationship("Group", \
        secondary=users_groups_assoc_table, \
        back_populates="users")

    def __repr__(self):
        return '<User %r>' % (self.username)

class Group(db.Model):
    '''
    The Group class represents a chat group in the system.

    Schema:
    - `id`
        - Type: Integer
        - Autogenerated, sequentially increasing ID
    - `groupname`
        - Type: String of up to 40 characters
        - Name of the group
        - Must be unique across groups (but can be same as a user)
    - `msgs` 
        - Type: list(Message)
        - List of all messages sent to this group.
    - `users`
        - Type: list(User)
        - List of users who are members of this group.
    '''
    __tablename__ = 'group'

    id = db.Column(db.Integer, primary_key=True)
    groupname = db.Column(db.String(40), index=True, unique=True)
    
    msgs = db.relationship('Message', backref='to_group', lazy='dynamic', foreign_keys=[Message.to_groupname])
    
    users = db.relationship("User", secondary=users_groups_assoc_table, \
        back_populates="groups")

    def __repr__(self):
        return '<Group %r>' % (self.groupname)



