import requestsimport jsonimport time server_url = "http://localhost:5000"username = ""logged_in = Falsedef login(new_username):    global username    global logged_in    if (logged_in):        print "Already logged in"    else:        r = requests.post(server_url + "/accounts/login/", \            data = {'username': username})        if (r.status_code == 200):            username = new_username            logged_in = True        else:             print "Network failure."def create_account(new_username):    if (logged_in):        print "Can't create account when logged in"    else:         r = requests.post(server_url + "/accounts/create/", \            data = {'username': new_username})        if not (r.status_code == 200):            print "Network failure."def delete_account(username):    if (logged_in):        r = requests.post(server_url + "/accounts/delete/", \            data = {'username': username})        if not (r.status_code == 200):            print "Network failure."        username = ""        logged_in = false    else:        print "Can't delete account when not logged in"def logout():    global logged_in    global username    if not logged_in:        print "Already logged out"    else:        r = requests.post(server_url + "/accounts/logout/", \            data = {'username': username})        if not (r.status_code == 200):             print "Network failure."        else:            username = ""            logged_in = Falsedef get_accounts(query):    r = requests.post(server_url + "/accounts/search/", \        data = {'query': query})    if not (r.status_code == 200):        print "Network failure."    parsed_json = json.loads(r.text)    return parsed_json['accounts']def get_groups(query):    r = requests.post(server_url + "/groups/search/", data = {'query': query})    if not (r.status_code == 200):        print "Network failure."    parsed_json = json.loads(r.text)    return parsed_json['groups']def create_group(group_name, user_list):    data = {        'username' : username,        'group_name' : group_name,        'user_list' : user_list    }    r = requests.post(server_url + "/groups/create/", data = data)    if not (r.status_code == 200):        print "Network failure."def fetch_undelivered_messages(from_name, do_group):    data = {        'to_user' : username,        'from_name' : from_name    }    fetch_str = 'fetch_undelivered'    if (do_group)        fetch_str += '-group'    r = requests.post(server_url + '/messages/' + fetch_str, data = data)    if not (r.status_code == 200):        print "Network failure"        return []    else:        parsed_json = json.loads(r.text)        return parsed_json['messages']def send_message(to_name, do_group, message):    data = {        'to': to_name,        'sender': username,        'message': message    }    send_str = 'send'    if (do_group)        send_str += '-group'    r = requests.post(server_url + '/messages/' + send_str, data = data)    if not (r.status_code == 200):        print "Message failed to send: " + message        retry_str = raw_input("Type y to resend: ")        if (retry_str == "y"):            send_message(to_name, do_group, message)def print_all_users():    all_accounts = get_accounts("*")    for account in all_accounts:        print accountdef print_all_groups():    all_groups = get_groups("*")    for group in all_groups:        print groupdef help():    print "login <username>"    if not logged_in:        print "createaccount <username>"    if logged_in:        print "other stuff"def chat():    quit = False    while not quit:        (fetch_undelivered_messages()def parse_command(command_arr):    incorrect_str = "Incorrect num args"    if (command_arr[0] == "help"):        if (len(command_arr) != 1):            print incorrect_str        else:            help()    elif (command_arr[0] == "login"):        if (len(command_arr) != 2):            print incorrect_str        else:            login(command_arr[1])    elif (command_arr[0] == "createaccount"):        if (len(command_arr) != 2):            print incorrect_str        else:            create_account(command_arr[1])    elif (command_arr[0] == "allusers"):        if (len(command_arr) != 1):            print incorrect_str        else:            print_all_users()    elif (command_arr[0] == "logout"):        if (len(command_arr) != 1):            print incorrect_str        else:            logout()    elif (command_arr[0] == "chat"):        if (len(command_arr) != 3):            print incorrect_str        else:            do_group = False            if (command_arr[1] == "group"):                do_group = True            elif not (command_arr[1] == "ind"):                print incorrect_str                break            chat(command_arr[2], do_group)     else:         print "Entered invalid command."if __name__ == '__main__':    print "Welcome to dumb chat"    print "To see available commands, type help"    while True:        command_str = "Enter a command: "        command = raw_input(command_str)        command_arr = command.split()        parse_command(command_arr)