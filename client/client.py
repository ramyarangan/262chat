import requestsimport jsonimport threadingimport timefrom Queue import Queueserver_url = "http://localhost:5000"username = ""logged_in = Falsedef login(new_username):    global username    global logged_in    if (logged_in):        print "You're already logged in as %s; please log out first!" % username    else:        r = requests.post(server_url + "/accounts/login", \            data = json.dumps({'username': new_username}))        if (r.status_code == 200):            username = new_username            logged_in = True            print "Successfully logged in as %s." % username        else:             print "Network failure."def create_account(new_username):    if (logged_in):        print "Can't create account when logged in"    else:         r = requests.post(server_url + "/accounts/create", \            data = json.dumps({'username': new_username}))        if not (r.status_code == 200):            print "Network failure."def delete_account():    global logged_in    global username    if logged_in:        r = requests.post(server_url + "/accounts/delete", \            data = json.dumps({'username': username}))        if r.status_code == 200:            print "Successfully deleted account \'%s\'." % username            username = ""            logged_in = False        else:            print "Failed to delete account \'%s\'. Please try again." % username    else:        print "You can't delete your account when not logged in."def logout():    global logged_in    global username    if not logged_in:        print "You're already logged out."    else:        #r = requests.post(server_url + "/accounts/logout", \        #    data = json.dumps({'username': username}))        if False: #not (r.status_code == 200):             print "Network failure."        else:            username = ""            logged_in = False            print "Successfully logged out."def create_group(groupname, users):    global username    global logged_in    # errors    if not logged_in:        print "You must be logged in to create chat groups."        return     if len(users) == 1 and users[0] == username:        print "You must invite at least one other user to the group. </3"        return    # add current user to user list, if necessary    if username not in users:        users.append(username)    data = {        'creator' : username,        'groupname' : groupname,        'usernames' : users    }    r = requests.post(server_url + "/groups/create", data = json.dumps(data))    if not (r.status_code == 200):        print "Network failure."    else:        print "Successfully created the group."# TODO: Return author list for group messages for display purposes# TODO: Take in message ids, handle ackdef fetch_undelivered_messages(from_name, do_group):    data = {        'to' : username,        'from' : from_name    }    fetch_str = 'fetch-undelivered'    if (do_group):        fetch_str += '-group'    r = requests.post(server_url + '/messages/' + fetch_str, \        data = json.dumps(data))    if not (r.status_code == 200):        print "Network failure"        return []    else:        parsed_json = json.loads(r.text)        return parsed_json['messages']def send_message(to_name, do_group, message):    data = {        'to': to_name,        'sender': username,        'message': message    }    send_str = 'send'    if (do_group):        send_str += '-group'    r = requests.post(server_url + '/messages/' + send_str, \        data = json.dumps(data))    if not (r.status_code == 200):        print "Message failed to send: " + message        retry_str = raw_input("Type y to resend: ")        if (retry_str == "y"):            send_message(to_name, do_group, message)def print_matching_users(query):    r = requests.post(server_url + "/accounts/search", \        data = json.dumps({'query': query}))    if not (r.status_code == 200):        print "Network failure."    else:         parsed_json = json.loads(r.text)        results = parsed_json['accounts']        print 'Found %d result(s).' % len(results)        for username in results:            print usernamedef print_all_users():    print_matching_users("*")def print_matching_groups(query):    r = requests.post(server_url + "/groups/search", \        data = json.dumps({'query': query}))    if not (r.status_code == 200):        print "Network failure."    else:        parsed_json = json.loads(r.text)                results_by_groupname = parsed_json['groups_by_groupname']        results_by_username = parsed_json['groups_by_username']        if not (results_by_groupname or results_by_username):            print 'No groups match this query.'            return         if results_by_groupname:            print 'Found %d group(s) with matching groupnames.' % len(results_by_groupname)            for groupname in results_by_groupname:                print groupname        if results_by_username:            print 'Found %d group(s) containing matching username(s).' % len(results_by_username)            for groupname in results_by_username:                print groupnamedef print_all_groups():      print_matching_groups('*')def help():    print "login <username>"    print "allusers"    print "allgroups"    if not logged_in:        print "createaccount <username>"    if logged_in:        print "chat ind <username>"        print "chat group <username>"        print "logout"class PollMessages(threading.Thread):    def __init__(self, data):        threading.Thread.__init__(self)        self.data = data    def run(self):        do_group = self.data["do_group"]        name = self.data["name"]        q = self.data["q"]        while(q.empty()):            messages = fetch_undelivered_messages(name, do_group)            if (len(messages) > 0):                for i in range(0, len(messages)):                    print messages[i]                print "                       <3 " + name                print "\n\n"            time.sleep(1)        q.get()        returndef chat(name, do_group):    print '========================================='    print 'Chatroom with %s' % name    quit = False    print "Type q to leave chat"    data = {        "name": name,        "do_group": do_group,        "q" : Queue(),    }    t = PollMessages(data)    t.daemon = True    t.setDaemon(True)    t.start()    time.sleep(1)    while not quit:        send_str = raw_input("")        if (send_str == "q"):            quit = True        else:             print "                       <3 " + username            print "\n\n"            send_message(name, do_group, send_str)    data["q"].put(1)    t.join()CMD_HELP = ['help', 'h']CMD_LOGIN = ['login', 'l']CMD_LOGOUT = ['logout', 'q']CMD_CREATE_ACCOUNT = ['createaccount', 'ca']CMD_DELETE_ACCOUNT = ['deleteaccount', 'da']CMD_CREATE_GROUP = ['creategroup', 'cg']#CMD_DELETE_GROUP = ['deletegroup', 'dg']CMD_LIST_USERS = ['listusers', 'lu']CMD_SEARCH_USERS = ['searchusers', 'su']CMD_LIST_GROUPS = ['listgroups', 'lg']CMD_SEARCH_GROUPS = ['searchgroups', 'sg']CMD_CHAT = ['chat', 'c']def parse_command(command_arr):    incorrect_str = "Incorrect num args"    if (command_arr[0] in CMD_HELP):        if (len(command_arr) != 1):            print incorrect_str        else:            help()    elif (command_arr[0] in CMD_LOGIN):        if (len(command_arr) != 2):            print incorrect_str        else:            login(command_arr[1])    elif (command_arr[0] in CMD_CREATE_ACCOUNT):        if (len(command_arr) != 2):            print incorrect_str        else:            create_account(command_arr[1])    elif (command_arr[0] in CMD_DELETE_ACCOUNT):        if (len(command_arr) != 1):            print incorrect_str        else:            delete_account()    elif (command_arr[0] in CMD_CREATE_GROUP):        if (len(command_arr) < 3):            # expected arguments: groupname name1 name2 ...            # so, at least one other person in group            print incorrect_str        else:            create_group(command_arr[1], command_arr[2:])    elif (command_arr[0] in CMD_LIST_USERS):        if (len(command_arr) != 1):            print incorrect_str        else:            print_all_users()    elif (command_arr[0] in CMD_SEARCH_USERS):        if (len(command_arr) != 2):            print incorrect_str        else:            print_matching_users(command_arr[1])    elif (command_arr[0] in CMD_LIST_GROUPS):        if (len(command_arr) != 1):            print incorrect_str        else:            print_all_groups()    elif (command_arr[0] in CMD_SEARCH_GROUPS):        if (len(command_arr) != 2):            print incorrect_str        else:            print_matching_groups(command_arr[1])    elif (command_arr[0] in CMD_LOGOUT):        if (len(command_arr) != 1):            print incorrect_str        else:            logout()    elif (command_arr[0] in CMD_CHAT):        if (len(command_arr) != 3):            print incorrect_str        else:            if (command_arr[1] == "ind"):                chat(command_arr[2], False)             elif (command_arr[1] == "group"):                chat(command_arr[2], True)             elif not (command_arr[1] == "ind"):                print incorrect_str    else:         print "Entered invalid command."if __name__ == '__main__':    print "This is CS50."    print "To see available commands, type \'help\'."    while True:        if logged_in:            command_str = "%s > " % username        else:            command_str = "[not logged in] > "        command = raw_input(command_str)        command_arr = command.split()        parse_command(command_arr)